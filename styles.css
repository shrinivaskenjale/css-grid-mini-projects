/* 
=============
Variables
=============
*/
:root {
  --primaryColor: #f15025;
  --mainBlack: #222;
  --mainWhite: #fff;
  --offWhite: #f7f7f7;
  --darkGrey: #afafaf;
  --transition: all 0.3s linear;
  --spacing: 0.2rem;
}

/* 
=============
Global styles
=============
*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
  color: var(--mainBlack);
  background: var(--mainWhite);
  line-height: 1.5;
}

a {
  text-decoration: none;
}

img {
  width: 100%;
  display: block;
}

ul {
  list-style: none;
}

h1,
h2,
h3 {
  text-transform: capitalize;
  letter-spacing: var(--spacing);
  margin-bottom: 1.25rem;
}

h1 {
  font-size: 3rem;
}

h2 {
  margin-bottom: 0;
}

p {
  font-weight: 300;
  font-size: 1rem;
  line-height: 2;
}

/* button */
.btn {
  display: inline-block;
  padding: 0.5rem 1rem;
  text-transform: capitalize;
  border: 3px solid var(--primaryColor);
  color: var(--primaryColor);
  margin: 3rem;
  transition: var(--transition);
}

.btn:hover {
  background: var(--primaryColor);
  color: var(--mainWhite);
}

/* 
=============
Navbar
=============
*/

.main-navbar {
  background: var(--darkGrey);
  padding: 0 2rem;
}

.main-navbar a {
  display: block;
  text-transform: capitalize;
  padding: 1rem 0;
  color: var(--primaryColor);
  letter-spacing: var(--spacing);
  transition: var(--transition);
}

.main-navbar a:hover {
  color: var(--mainBlack);
}

@media screen and (min-width: 1000px) {
  .main-navbar ul {
    max-width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
  }
  .main-navbar a {
    text-align: center;
  }
}

/* 
=============
Hero
=============
*/

.hero {
  background: var(--primaryColor);
  min-height: 100vh;
  color: var(--mainWhite);

  display: grid;
  place-items: center;
  /* justify-items: center;
  align-items: center; */
}

.hero-banner {
  padding: 0 3rem;
}

.hero-banner p {
  width: 80%;
  max-width: 35rem;
}

@media screen and (min-width: 800px) {
  .hero {
    background: linear-gradient(rgb(241, 80, 37, 0.7), rgb(0, 0, 0, 0.7)),
      url(./images/image-2.jpeg) center/cover fixed;
  }
  .hero-banner {
    padding: 0;
  }
}

/* 
=============
Cards (Option 2 is recommended)
=============
*/

.cards {
  padding: 3rem 0;
}

.title {
  text-align: center;
  margin-bottom: 2rem;
}

.card {
  border: 0.2rem solid var(--darkGrey);
}

.card img {
  height: 17rem;
  object-fit: cover;
}

.card-info {
  padding: 1rem;
}

.card-footer {
  background-color: var(--darkGrey);
  padding: 0.5rem 1rem;
  font-size: 1.5rem;

  display: grid;
  grid-template-columns: repeat(4, 1fr);
  justify-items: center;
}

.cards-center {
  width: 90vw;
  max-width: 1200px;
  margin: 0 auto;

  display: grid;
  gap: 3rem 2rem;

  /* Option 2: Let css handle creation of columns by giving minimum width we want for card */
  /* You can also decide how many columns maximum it will create by giving min width to grid item which is equal to: 
  ( (total width of container - total gaps) / max. no. of columns ) */
  grid-template-columns: repeat(auto-fill, minmax(20rem, 1fr));
  /* end of option 2 */
}

/* Option 1: Using media queries, set columns manually */

/* 2 column */
/* @media screen and (min-width: 800px) {
  .cards-center {
    grid-template-columns: repeat(2, 1fr);
  }
} */

/* 3 column */
/* @media screen and (min-width: 1200px) {
  .cards-center {
    grid-template-columns: repeat(3, 1fr);
  }
} */

/* end of option 1 */

/* We want card's text content to span remaining height of the card */

.card {
  display: grid;
  grid-template-rows: auto 1fr auto;
}

/* 
=============
Tiles
=============
*/

.tiles {
  padding: 3rem 0;
}

.tiles-center {
  width: 90vw;
  max-width: 1200px;
  margin: 0 auto;

  /* single column */
  display: grid;
  gap: 2rem;
}

@media screen and (min-width: 800px) {
  .tiles-center {
    grid-template-columns: 1fr 1fr;
  }
}
@media screen and (min-width: 1000px) {
  .tiles-center {
    grid-template-columns: 1fr 1fr 1fr;
  }
}
/* 4 cols and 5 rows */
@media screen and (min-width: 1200px) {
  .tiles-center {
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(5, 12rem);
    grid-template-areas:
      "a a a b"
      "a a a c"
      "d d d d"
      "e f f f"
      "e g h i";
  }

  .tiles img {
    height: 100%;
    object-fit: cover;
  }

  .tile-1 {
    grid-area: a;
  }
  .tile-2 {
    grid-area: b;
  }
  .tile-3 {
    grid-area: c;
  }
  .tile-4 {
    grid-area: d;
  }
  .tile-5 {
    grid-area: e;
  }
  .tile-6 {
    grid-area: f;
  }
  .tile-7 {
    grid-area: g;
  }
  .tile-8 {
    grid-area: h;
  }
  .tile-9 {
    grid-area: i;
  }
}

/* 
=============
Layout
=============
*/

header {
  background: var(--primaryColor);
  color: var(--mainWhite);
  text-align: center;
  padding: 0.5rem 0;
}

.navbar {
  background: var(--darkGrey);
}
.navbar a {
  padding: 1rem;
  display: inline-block;
  text-transform: capitalize;
  letter-spacing: var(--spacing);
  font-size: 1.2rem;
  color: var(--mainBlack);
  transition: var(--transition);
}

.navbar a:hover {
  color: var(--mainWhite);
}

.content {
  padding: 2rem;
}
.content p {
  font-size: 1rem;
}

.sidebar {
  background: var(--primaryColor);
  padding: 1rem 0;
  font-size: 1.5rem;
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  justify-items: center;
}
.footer {
  background: var(--mainBlack);
  color: var(--mainWhite);
  text-align: center;
  text-transform: capitalize;
  padding: 0.5rem 0;
}

.footer p {
  font-size: 1.2rem;
}

/* layout */
.main {
  min-height: 100vh;
  display: grid;
  /* we want content to take as much vertical space as available */
  grid-template-rows: auto auto 1fr auto auto;
}

@media screen and (min-width: 800px) {
  .navbar ul {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    justify-items: center;
  }
}

/* 3 rows and 3 cols */
/* Here we will use grid lines instead of grid-areas */
@media screen and (min-width: 1000px) {
  .main {
    grid-template-columns: 12rem 1fr 3rem;
    grid-template-rows: auto 1fr auto;
  }
  .header {
    grid-column: 1/-1;
  }
  .content {
    grid-row: 2/3;
    grid-column: 2/3;
  }
  .navbar ul {
    grid-template-columns: 1fr;
  }
  .sidebar {
    grid-template-columns: 1fr;
    align-items: center;
  }
  .footer {
    grid-column: 1/-1;
  }
}
